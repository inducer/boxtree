from __future__ import division

__copyright__ = "Copyright (C) 2013 Andreas Kloeckner \
                 Copyright (C) 2018 Hao Gao"

__license__ = """
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import numpy as np
import pyopencl as cl
from boxtree.distributed import MPITags
from mpi4py import MPI
from boxtree.pyfmmlib_integration import FMMLibExpansionWrangler
from pytools import memoize_method
from pyopencl.tools import dtype_to_ctype
from pyopencl.elementwise import ElementwiseKernel
from mako.template import Template

import logging
logger = logging.getLogger(__name__)


# {{{ Distributed FMM wrangler

class DistributedExpansionWrangler:
    def __init__(self, queue, tree):
        self.queue = queue
        self.tree = tree

    def multipole_expansions_view(self, mpole_exps, level):
        # should be overwritten in subclasses
        level_start_box_idx = -1
        mpoles_current_level = np.array(0)
        return level_start_box_idx, mpoles_current_level

    def distribute_source_weights(
            self, src_weight_vecs, src_idx_all_ranks, comm=MPI.COMM_WORLD):
        """This method transfers needed source_weights from root rank to each worker
        rank in communicator *comm*.

        This method needs to be called collectively by all ranks in communicator
        *comm*.

        :arg src_weight_vecs: a sequence of :class:`numpy.ndarray` with shape
            ``(nsources,)`` representing the weights of sources on the root rank.
            ``None`` on worker ranks.
        :arg src_idx_all_ranks: a :class:`list` with shape ``(nranks,)``, where the
            ith entry is a :class:`numpy.ndarray` indexed into *source_weights* to be
            sent from the root rank to rank *i*. Each entry can be generated by
            *generate_local_tree*. ``None`` on worker ranks.
        :return: The received source weights of the current rank.
        """
        mpi_rank = comm.Get_rank()
        mpi_size = comm.Get_size()

        if mpi_rank == 0:
            distribute_weight_req = []
            local_src_weight_vecs = np.empty((mpi_size,), dtype=object)

            for irank in range(mpi_size):
                local_src_weight_vecs[irank] = [
                    source_weights[src_idx_all_ranks[irank]]
                    for source_weights in src_weight_vecs]

                if irank != 0:
                    distribute_weight_req.append(comm.isend(
                        local_src_weight_vecs[irank], dest=irank,
                        tag=MPITags["DIST_WEIGHT"]
                    ))

            MPI.Request.Waitall(distribute_weight_req)
            local_src_weight_vecs = local_src_weight_vecs[0]
        else:
            local_src_weight_vecs = comm.recv(source=0, tag=MPITags["DIST_WEIGHT"])

        return local_src_weight_vecs

    def slice_mpoles(self, mpoles, slice_indices):
        if len(slice_indices) == 0:
            return np.empty((0,), dtype=mpoles.dtype)

        level_start_slice_indices = np.searchsorted(
            slice_indices, self.tree.level_start_box_nrs)
        mpoles_list = []

        for ilevel in range(self.tree.nlevels):
            start, stop = level_start_slice_indices[ilevel:ilevel+2]
            if stop > start:
                level_start_box_idx, mpoles_current_level = \
                    self.multipole_expansions_view(mpoles, ilevel)
                mpoles_list.append(
                    mpoles_current_level[
                        slice_indices[start:stop] - level_start_box_idx
                    ].reshape(-1)
                )

        return np.concatenate(mpoles_list)

    def update_mpoles(self, mpoles, mpole_updates, slice_indices):
        if len(slice_indices) == 0:
            return

        level_start_slice_indices = np.searchsorted(
            slice_indices, self.tree.level_start_box_nrs)
        mpole_updates_start = 0

        for ilevel in range(self.tree.nlevels):
            start, stop = level_start_slice_indices[ilevel:ilevel+2]
            if stop > start:
                level_start_box_idx, mpoles_current_level = \
                    self.multipole_expansions_view(mpoles, ilevel)
                mpoles_shape = (stop - start,) + mpoles_current_level.shape[1:]

                from pytools import product
                mpole_updates_end = mpole_updates_start + product(mpoles_shape)

                mpoles_current_level[
                    slice_indices[start:stop] - level_start_box_idx
                ] += mpole_updates[
                    mpole_updates_start:mpole_updates_end
                ].reshape(mpoles_shape)

                mpole_updates_start = mpole_updates_end

    @memoize_method
    def find_boxes_used_by_subrange_kernel(self):
        return ElementwiseKernel(
            self.queue.context,
            Template(r"""
                ${box_id_t} *contributing_boxes_list,
                int subrange_start,
                int subrange_end,
                ${box_id_t} *box_to_user_starts,
                int *box_to_user_lists,
                char *box_in_subrange
            """).render(
                box_id_t=dtype_to_ctype(self.tree.box_id_dtype),
            ),
            Template(r"""
                ${box_id_t} ibox = contributing_boxes_list[i];
                ${box_id_t} iuser_start = box_to_user_starts[ibox];
                ${box_id_t} iuser_end = box_to_user_starts[ibox + 1];
                for(${box_id_t} iuser = iuser_start; iuser < iuser_end; iuser++) {
                    int useri = box_to_user_lists[iuser];
                    if(subrange_start <= useri && useri < subrange_end) {
                        box_in_subrange[i] = 1;
                    }
                }
            """).render(
                box_id_t=dtype_to_ctype(self.tree.box_id_dtype)
            ),
            "find_boxes_used_by_subrange"
        )

    def find_boxes_used_by_subrange(
            self, subrange, box_to_user_starts, box_to_user_lists,
            contributing_boxes_list):
        """Test whether the multipole expansions of the contributing boxes are used
        by at least one box in a range.

        :arg subrange: the range is represented by ``(subrange[0], subrange[1])``.
        :arg box_to_user_start: a :class:`pyopencl.array.Array` object indicating the
            start and end index in *box_to_user_lists* for each box in
            *contributing_boxes_list*.
        :arg box_to_user_lists: a :class:`pyopencl.array.Array` object storing the
            users of each box in *contributing_boxes_list*.
        :returns: a :class:`pyopencl.array.Array` object with the same shape as
            *contributing_boxes_list*, where the ith entry is 1 if
            ``contributing_boxes_list[i]`` is used by at least on box in the
            subrange specified.
        """
        box_in_subrange = cl.array.zeros(
            contributing_boxes_list.queue,
            contributing_boxes_list.shape[0],
            dtype=np.int8
        )
        knl = self.find_boxes_used_by_subrange_kernel()

        knl(
            contributing_boxes_list,
            subrange[0],
            subrange[1],
            box_to_user_starts,
            box_to_user_lists,
            box_in_subrange
        )

        return box_in_subrange


class DistributedFMMLibExpansionWrangler(
        FMMLibExpansionWrangler, DistributedExpansionWrangler):
    def __init__(self, queue, tree, helmholtz_k, fmm_level_to_nterms=None):
        DistributedExpansionWrangler.__init__(self, queue, tree)
        FMMLibExpansionWrangler.__init__(
            self, tree, helmholtz_k, fmm_level_to_nterms
        )

# }}}


# {{{ Communicate mpoles

def communicate_mpoles(wrangler, comm, trav, mpole_exps, return_stats=False):
    """Based on Algorithm 3: Reduce and Scatter in [1].

    The main idea is to mimic a allreduce as done on a hypercube network, but to
    decrease the bandwidth cost by sending only information that is relevant to
    the processes receiving the message.

    This function needs to be called collectively by all processes in *comm*.

    .. [1] Lashuk, Ilya, Aparna Chandramowlishwaran, Harper Langston,
       Tuan-Anh Nguyen, Rahul Sampath, Aashay Shringarpure, Richard Vuduc, Lexing
       Ying, Denis Zorin, and George Biros. â€œA massively parallel adaptive fast
       multipole method on heterogeneous architectures." Communications of the
       ACM 55, no. 5 (2012): 101-109.
    """
    mpi_rank = comm.Get_rank()
    mpi_size = comm.Get_size()

    stats = {}

    # contributing_boxes:
    #
    # A mask of the the set of boxes that the current process contributes
    # to. This process contributes to a box when:
    #
    # (a) this process owns sources that contribute to the multipole expansion
    # in the box (via the upward pass) or
    # (b) this process has received a portion of the multipole expansion in this
    # box from another process.
    #
    # Initially, this set consists of the boxes satisfying condition (a), which
    # are precisely the boxes owned by this process and their ancestors.
    contributing_boxes = trav.tree.ancestor_mask.copy()
    contributing_boxes[trav.tree.responsible_boxes_list] = 1

    from boxtree.tools import AllReduceCommPattern
    comm_pattern = AllReduceCommPattern(mpi_rank, mpi_size)

    # Temporary buffers for receiving data
    mpole_exps_buf = np.empty(mpole_exps.shape, dtype=mpole_exps.dtype)
    boxes_list_buf = np.empty(trav.tree.nboxes, dtype=trav.tree.box_id_dtype)

    stats["bytes_sent_by_stage"] = []
    stats["bytes_recvd_by_stage"] = []

    box_to_user_starts_dev = cl.array.to_device(
        wrangler.queue, trav.tree.box_to_user_starts
    )

    box_to_user_lists_dev = cl.array.to_device(
        wrangler.queue, trav.tree.box_to_user_lists
    )

    while not comm_pattern.done():
        send_requests = []

        # Send data to other processors.
        if comm_pattern.sinks():
            # Compute the subset of boxes to be sent.
            message_subrange = comm_pattern.messages()

            contributing_boxes_list = np.nonzero(contributing_boxes)[0].astype(
                trav.tree.box_id_dtype
            )

            contributing_boxes_list_dev = cl.array.to_device(
                wrangler.queue, contributing_boxes_list
            )

            box_in_subrange = wrangler.find_boxes_used_by_subrange(
                message_subrange,
                box_to_user_starts_dev, box_to_user_lists_dev,
                contributing_boxes_list_dev
            )

            box_in_subrange_host = box_in_subrange.get().astype(bool)

            relevant_boxes_list = contributing_boxes_list[
                box_in_subrange_host
            ].astype(trav.tree.box_id_dtype)

            """
            # Pure Python version for debugging purpose
            relevant_boxes_list = []
            for contrib_box in contributing_boxes_list:
                iuser_start, iuser_end = trav.tree.box_to_user_starts[
                    contrib_box:contrib_box + 2
                ]
                for user_box in trav.tree.box_to_user_lists[iuser_start:iuser_end]:
                    if subrange_start <= user_box < subrange_end:
                        relevant_boxes_list.append(contrib_box)
                        break
            """

            relevant_boxes_list = np.array(
                relevant_boxes_list, dtype=trav.tree.box_id_dtype
            )

            relevant_mpole_exps = wrangler.slice_mpoles(
                mpole_exps, relevant_boxes_list
            )

            # Send the box subset to the other processors.
            for sink in comm_pattern.sinks():
                req = comm.Isend(relevant_mpole_exps, dest=sink,
                                 tag=MPITags["REDUCE_POTENTIALS"])
                send_requests.append(req)

                req = comm.Isend(relevant_boxes_list, dest=sink,
                                 tag=MPITags["REDUCE_INDICES"])
                send_requests.append(req)

        # Receive data from other processors.
        for source in comm_pattern.sources():
            comm.Recv(mpole_exps_buf, source=source,
                      tag=MPITags["REDUCE_POTENTIALS"])

            status = MPI.Status()
            comm.Recv(boxes_list_buf, source=source, tag=MPITags["REDUCE_INDICES"],
                      status=status)
            nboxes = status.Get_count() // boxes_list_buf.dtype.itemsize

            # Update data structures.
            wrangler.update_mpoles(mpole_exps, mpole_exps_buf,
                                   boxes_list_buf[:nboxes])

            contributing_boxes[boxes_list_buf[:nboxes]] = 1

        for req in send_requests:
            req.wait()

        comm_pattern.advance()

    if return_stats:
        return stats

# }}}
